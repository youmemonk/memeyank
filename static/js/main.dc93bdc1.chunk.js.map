{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","alt","React","Component","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","type","placeholder","onChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAgBeA,E,4JAbb,WACE,OACE,mCACE,qBACEC,IAAI,iEACJC,IAAI,cAEN,kE,GARaC,IAAMC,W,cCwEZC,E,kDAvEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATR,E,qDAYd,WAAqB,IAAD,OAClBE,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,IAAQE,EAAUF,EAASG,KAAnBD,MAER,EAAKE,SAAS,CAAEV,YAAaQ,S,0BAInC,SAAaG,GAEX,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdC,KAAKL,SAAL,eAAiBG,EAAOC,M,0BAG1B,SAAaH,GACXA,EAAMK,iBAEN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IAGpDR,KAAKL,SAAS,CAAEX,UAAWuB,M,oBAG7B,WACE,OACE,gCACE,uBAAME,UAAU,YAAYC,SAAUV,KAAKZ,aAA3C,UACE,uBACEuB,KAAK,OACLC,YAAY,WACZd,KAAK,UACLC,MAAOC,KAAKnB,MAAMC,QAClB+B,SAAUb,KAAKd,eAGjB,uBACEyB,KAAK,OACLC,YAAY,cACZd,KAAK,aACLC,MAAOC,KAAKnB,MAAME,WAClB8B,SAAUb,KAAKd,eAGjB,6CAGF,sBAAKuB,UAAU,OAAf,UACE,qBAAKjC,IAAKwB,KAAKnB,MAAMG,UAAWP,IAAI,KACpC,oBAAIgC,UAAU,MAAd,SAAqBT,KAAKnB,MAAMC,UAChC,oBAAI2B,UAAU,SAAd,SAAwBT,KAAKnB,MAAME,uB,GAjEjBL,IAAMC,WCcnBmC,E,4JAXb,WACE,OACE,gCACE,0DACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GANUpC,IAAMC,WCQToC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.dc93bdc1.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header>\n        <img\n          src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\n          alt=\"problem ?\"\n        />\n        <p>Meme Generator © M:2021</p>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nclass MemeGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      topText: \"\",\n      bottomText: \"\",\n      randomImg: \"http://i.imgflip.com/1bij.jpg\",\n      allMemeImgs: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((response) => {\n        const { memes } = response.data;\n        // console.log(memes[0]);\n        this.setState({ allMemeImgs: memes });\n      });\n  }\n\n  handleChange(event) {\n    // console.log(\"working\");\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    // get random number (index in the array)\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n    const randMemeImg = this.state.allMemeImgs[randNum].url;\n    //get the meme from that index\n    // et randomimg to url of that img\n    this.setState({ randomImg: randMemeImg });\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Top Text\"\n            name=\"topText\"\n            value={this.state.topText}\n            onChange={this.handleChange}\n          />\n\n          <input\n            type=\"text\"\n            placeholder=\"Bottom Text\"\n            name=\"bottomText\"\n            value={this.state.bottomText}\n            onChange={this.handleChange}\n          />\n\n          <button>Gen!</button>\n        </form>\n\n        <div className=\"meme\">\n          <img src={this.state.randomImg} alt=\"\" />\n          <h2 className=\"top\">{this.state.topText}</h2>\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MemeGenerator;\n","import React from 'react'\nimport Header from './Header'\nimport MemeGenerator from './MemeGenerator'\n\nclass App extends React.Component {\n  render(){\n    return (\n      <div>\n        <h1>Made with ❤️..</h1>\n        <Header />\n        <MemeGenerator />\n      </div>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}